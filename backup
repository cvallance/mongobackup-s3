#!/bin/bash

function restore {
  aws s3api get-object --bucket $S3BUCKET --key $FILE /backup/$FILE
  tar -zxvf /backup/$FILE -C /backup
  mongorestore -h $MONGO_HOST -p $MONGO_PORT dump/
  echo "Cleaning up..."
  rm -rf dump/ /backup/$FILE
}

if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  echo "AWS_ACCESS_KEY_ID must be set"
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  echo "AWS_SECRET_ACCESS_KEY must be set"
fi

if [ -z "$S3BUCKET" ]; then
  echo "S3BUCKET must be set"
fi

if [ -z "$DATEFORMAT" ]; then
  DATEFORMAT='%Y%m%d_%H%M%S'
fi

if [ -z "$FILEPREFIX" ]; then
  FILEPREFIX=''
fi

if [ -z "$MONGO_HOST" ]; then
  MONGO_HOST="mongo"
fi

if [ -z "$MONGO_PORT" ]; then
  MONGO_PORT="27017"
fi

#support for legacy env vars
if [[ -n "$MONGO_PORT_27017_TCP_ADDR" ]]; then
  MONGO_HOST=$MONGO_PORT_27017_TCP_ADDR
fi

if [[ -n "$MONGO_PORT_27017_TCP_PORT" ]]; then
  MONGO_PORT=$MONGO_PORT_27017_TCP_PORT
fi

if [[ -n "$DB" ]]; then
  DB_ARG="--db $DB"
fi

if [ "$1" == "backup" ]; then
  echo "Starting backup..."

  DATE=$(date +$DATEFORMAT)
  FILENAME=$FILEPREFIX$DATE.tar.gz
  FILE=/backup/backup-$FILENAME

  echo ""
  echo "Step 1) mongodump"
  mongodump -h $MONGO_HOST -p $MONGO_PORT $DB_ARG

  echo ""
  echo "Step 2) tar the result of mongodump"
  tar -zcvf $FILE dump/

  echo ""
  echo "Step 3) upload to s3 bucket"
  aws s3api put-object --bucket $S3BUCKET --key $FILENAME --body $FILE

  echo ""
  echo "Step 4) Clean up"
  rm -rf dump/ $FILE
elif [ "$1" == "list" ]; then
  echo "Listing backups..."

  aws s3api list-objects --bucket $S3BUCKET --query 'Contents[].{Key: Key, Size: Size}' --output table
elif [ "$1" == "latest" ]; then
  echo "Determining backup to restore..."

  : ${FILE:=$(aws s3 ls s3://$S3BUCKET | awk -F " " '{print $4}' | grep ^$FILEPREFIX | sort -r | head -n1)}
  echo "Restoring $FILE."
  restore
else
  echo "Starting restore"

  FILE=$1
  restore
fi
